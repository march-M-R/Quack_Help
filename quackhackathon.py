# -*- coding: utf-8 -*-
"""Quackhackathon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1weWmtsTR5hxrLRlvVRgnEda3rSC6wzml
"""

import geocoder
import pandas as pd
import numpy as np
import folium
import requests
import sys

#Getting coordinates from user
lat = float(sys.argv[1])  # Latitude
lon = float(sys.argv[2])  # Longitude
print(f"Received coordinates: Latitude = {lat}, Longitude = {lon}")

base_url = "https://data.cityofnewyork.us/resource/n2zq-pubd.json"

params = {
    "$limit": 20000,
}

response = requests.get(base_url, params=params)

if response.status_code != 200:
    print(f"Error: {response.status_code} - {response.text}")

# Get data as a pandas DataFrame
calls = pd.DataFrame(response.json())
calls = calls.dropna()
calls.head()





calls = calls[['incident_date', 'incident_time', 'boro_nm', 'typ_desc', 'latitude', 'longitude']].reset_index(drop = True)





calls['incident_date'] = pd.to_datetime(calls['incident_date'])

cat = []

for s in calls.typ_desc:
  cat.append(s.split(':')[0])

calls['typ_desc'] = pd.DataFrame(cat)



severity_mapping = {
    # Level 1
    "COMMUNITY TIME": 1,
    "VISIBILITY PATROL": 1,
    "YOUTH HOME VISIT": 1,
    "STATION INSPECTION BY TRANSIT BUREAU PERSONNEL": 1,
    "TRAIN RUN/MOBILE ORDER MAINTENANCE SWEEP": 1,
    "HOUSE OF WORSHIP VISIT": 1,
    "ALL OUT DIRECTED": 1,
    "BROADCAST": 1,

    # Level 2
    "DISPUTE": 2,
    "DISORDERLY": 2,
    "AMBULANCE CASE": 2,
    "VERIFY AMB NEEDED": 2,
    "ALARMS": 2,
    "TRAFFIC SAFETY": 2,
    "TRAFFIC/PARKING COND": 2,
    "PANIC ALARM": 2,
    "BUS INVESTIGATION": 2,
    "PO/SECURITY HOLDING SUSPECT": 2,
    "OTHER NON-CRIME INCIDENT (SPECIFY)": 2,
    "TRANSIT PATROL/INSPECTION BY NON-TRANSIT BUREAU PERSONNEL": 2,
    "ASSIST POLICE OFFICER":2,

    # Level 3
    "VEHICLE ACCIDENT": 3,
    "SEE COMPLAINANT": 3,
    "INVESTIGATE/POSSIBLE CRIME": 3,
    "SHOT SPOTTER": 3,
    "SUSP PACKAGE": 3,
    "FIRE": 3,

    # Level 4
    "ASSAULT (PAST)": 4,
    "LARCENY (PAST)": 4,
    "BURGLARY (PAST)": 4,
    "OTHER CRIMES (PAST)": 4,
    "ROBBERY (PAST)": 4,
    "TRAIN ORDER MAINTENANCE SWEEP (TOMS)": 4,

    # Level 5
    "ROBBERY (IN PROGRESS)": 5,
    "BURGLARY (IN PROGRESS)": 5,
    "LARCENY (IN PROGRESS)": 5,
    "OTHER CRIMES (IN PROGRESS)": 5,

    # Level 6
    "ASSAULT (IN PROGRESS)": 6,
    "EXPLOSIVE DEVICE OR THREAT": 6,
    "HAZ MAT": 6,
    "ROVING BAND": 6
}

calls['severity'] = calls['typ_desc'].map(severity_mapping)

calls['severity']



# crime_map = folium.Map(location=[40.731131121102294, -73.92817370634128],tiles='CartoDB dark matter',  max_bounds=True, min_zoom=13)
# # crime_map

# crime_map

# from folium.plugins import HeatMap

# heat_data = [[row['latitude'], row['longitude']] for index, row in calls.iterrows()]

# # severity_colors = {
# #     1: "green",    # Safe zone
# #     2: "lightgreen",
# #     3: "yellow",
# #     4: "orange",
# #     5: "red",
# #     6: "darkred"
# # }

# # Add HeatMap to the map
# HeatMap(heat_data, radius=20, blur=10, max_zoom=13).add_to(crime_map)

# crime_map

# crime_map.save("testmap.html")

# calls

calls['latitude'] = pd.to_numeric(calls['latitude'])
calls['longitude'] = pd.to_numeric(calls['longitude'])

# calls

# calls.to_csv('calls_preprocessed.csv')



lat_min, lon_min = lat - 0.01, lon - 0.01
lat_max, lon_max = lat + 0.01, lon + 0.01

filtered_calls = calls[
    (lat_min<=calls['latitude']) & (calls['latitude']<=lat_max) &
    (lon_min<=calls['longitude']) & (calls['longitude']<=lon_max)
]

filtered_calls

offset = [[lat_min, lon_min], [lat_max, lon_max]]
offset

# #folium.Rectangle(offset, color="red", fill=True).add_to(crime_map)
# crime_map.fit_bounds(offset)

# crime_map



"""Folium Map another try"""

from folium.plugins import MarkerCluster

data = filtered_calls[['latitude', 'longitude', 'severity']]
data

m = folium.Map(location=[40.731131121102294, -73.92817370634128],tiles='CartoDB dark matter',  max_bounds=True, min_zoom=13)

def get_color(severity):
    color_map = {
        1: 'lightgreen',
        2: 'green',
        3: 'yellow',
        4: 'orange',
        5: 'red',
        6: 'darkred',
    }
    return color_map.get(severity, 'gray')



for i, latitude, longitude, severity in zip(data.index, data['latitude'], data['longitude'], data['severity']):
  folium.CircleMarker(
      location=[latitude, longitude],
      radius=7,
      #severity = data['severity'][data['latitude'] = latitude],
      tooltip = f"Incident:{filtered_calls.loc[i,'typ_desc']}",
      color=get_color(severity),
      fill=True,
      fill_color=get_color(severity),
      fill_opacity=0.6,
      ).add_to(m)

folium.Marker(
        location=[lat,lon],
        tooltip=f"You are here: {get_address(lat, lon)}"
    ).add_to(m)

legend_html = """
<div style="
    position: fixed;
    bottom: 50px;
    right: 50px;
    width: 160px;
    height: 200px;
    background-color: white;
    z-index: 1000;
    font-size: 14px;
    border: 2px solid gray;
    padding: 10px;
    box-shadow: 2px 2px 5px rgba(0,0,0,0.4);
">
    <b>Severity Legend</b><br>
    <i style="background: green; width: 10px; height: 10px; display: inline-block;"></i> Minimal Severity (Low)<br>
    <i style="background: lightgreen; width: 10px; height: 10px; display: inline-block;"></i> Low Severity<br>
    <i style="background: yellow; width: 10px; height: 10px; display: inline-block;"></i> Moderate Severity<br>
    <i style="background: orange; width: 10px; height: 10px; display: inline-block;"></i> High Severity<br>
    <i style="background: red; width: 10px; height: 10px; display: inline-block;"></i> Very High Severity <br>
    <i style="background: darkred; width: 10px; height: 10px; display: inline-block;"></i> > Extremely High Severity (High)
</div>
"""

m.get_root().html.add_child(folium.Element(legend_html))

m.save('output.html')



# for latitude, longitude in zip(data['latitude'], data['longitude']):
#     print(latitude, longitude)









"""KNN Begins here"""

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

#Split to X an y
X_train = filtered_calls[['latitude', 'longitude']]
y_train = filtered_calls['severity']

# Scale the data (important for KNN)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_train)

# Train the KNN model
k = 5  # Number of neighbors to consider
knn_model = KNeighborsClassifier(n_neighbors=k)
knn_model.fit(X_scaled, y_train.values)



# Scale the user location using the same scaler
user_location_scaled = scaler.transform([[lat, lon]])

# Predict the severity at the user's location
predicted_severity = knn_model.predict(user_location_scaled)[0]

print(f"Predicted Severity Level at Location ({lat}, {lon}): {predicted_severity}")



"""Fetching address in return for coordinates"""

from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="myGeocoder")

def get_address(lat, lon):
    location = geolocator.reverse((lat, lon), language="en")
    return location.address if location else "Address not found"

get_address(lat, lon)



# severity_mapping = {
#     "COMMUNITY TIME": 1,
#     "VISIBILITY PATROL": 1,
#     "YOUTH HOME VISIT": 1,
#     "STATION INSPECTION BY TRANSIT BUREAU PERSONNEL": 1,
#     "TRAIN RUN/MOBILE ORDER MAINTENANCE SWEEP": 1,
#     "DISPUTE": 2,
#     "DISORDERLY": 2,
#     "AMBULANCE CASE": 2,
#     "VERIFY AMB NEEDED": 2,
#     "ALARMS": 2,
#     "TRAFFIC SAFETY": 2,
#     "OTHER NON-CRIME INCIDENT (SPECIFY)": 2,
#     "ASSIST POLICE OFFICER": 2,
#     "FIRE": 3,
#     "INVESTIGATE/POSSIBLE CRIME": 3,
#     "SEE COMPLAINANT": 3,
#     "SHOT SPOTTER": 4,
#     "ASSAULT (PAST)": 4,
#     "LARCENY (PAST)": 4,
#     "BURGLARY (PAST)": 4,
#     "VEHICLE ACCIDENT": 4,
#     "OTHER CRIMES (PAST)": 4,
#     "ROBBERY (PAST)": 5,
#     "ROBBERY (IN PROGRESS)": 5,
#     "BURGLARY (IN PROGRESS)": 5,
#     "OTHER CRIMES (IN PROGRESS)": 5,
#     "EXPLOSIVE DEVICE OR THREAT": 6,
#     "HAZ MAT": 6,
#     "ASSAULT (IN PROGRESS)": 6,
#     "OTHER CRIMES (IN PROGRESS)": 6
# }

# calls['severity'] = calls['typ_desc'].map(severity_mapping)

# calls['severity']

